---
- name: Determine if firewalld installed
  command: "rpm -q firewalld"
  register: has_firewalld
  ignore_errors: yes
  changed_when: false

- name: Determine if iptables-services installed
  command: "rpm -q iptables-services"
  register: has_iptables
  ignore_errors: yes
  changed_when: false

- name: Install correct authorized_key file
  authorized_key: user={{ ansible_ssh_user }} key="{{ lookup('file', '/home/fedora/.ssh/id_rsa.pub') }}"
  tags:
    - prerun
    - ssh

- name: Install correct resolv.conf
  copy: src=resolv.conf dest=/etc/resolv.conf
  tags:
    - prerun

- name: Grow root XFS filesystem
  command: xfs_growfs /
  tags:
    - prerun

- name: Make sure atomic tree is up to date
  command: "atomic upgrade"
  tags:
    - prerun


- name: Enable new tree 
  command: systemctl reboot
  async: 0
  poll: 0
  ignore_errors: true
  tags:
    - prerun

- name: waiting for minion to come back online
  local_action: wait_for host={{ inventory_hostname }}
                state=started
  sudo: false
  tags:
    - prerun


- name: Install Flannel config file
  template: src=flanneld.j2 dest=/etc/sysconfig/flanneld

- name: Create drop-in dir for docker service
  command: mkdir -p /etc/systemd/system/docker.service.d/

- name: Install flannel enabled docker.service drop-in file
  copy: src=10-flanneld-network.conf dest=/etc/systemd/system/docker.service.d/
  notify:
    - reload systemd

- name: write the main Docker config files
  template: src=docker.j2 dest=/etc/sysconfig/docker

- name: write the main Kubernetes config files
  template: src=config.j2 dest=/etc/kubernetes/config

- name: write the config files for kubelet
  template: src=kubelet.j2 dest=/etc/kubernetes/kubelet

- name: Enable flannel
  service: name=flanneld enabled=yes state=started

- name: Enable docker
  service: name=docker enabled=yes state=started

- name: Enable kubelet
  service: name=kubelet enabled=yes state=started

- name: Enable proxy
  service: name=kube-proxy enabled=yes state=started
  notify:
    - restart daemons

- include: firewalld.yml
  when: has_firewalld.rc == 0

- include: iptables.yml
  when: has_firewalld.rc != 0 and has_iptables.rc == 0

